p23
    C + G, Q, enter   退出
p24 2.2.3 CEAN
    example: http://pragmaticprogrammer.com/titles/jaerlang/code.html
p26 
    推出（linux Ctrl+C/ windows ctrl+break）
    >16#cafe * 32#sugar.        %指定进制的乘法
p32 
    >5 div 3    1
    >5 rem 3    2
    >4/2        2.0000
    atom 常量 小写字母或""
    Preson = {Person,
                {name, joe},
                {height, 1.82}
                {footsize, 42}}.
    {point, x, y} = {point, 10, 20}
    {_, x, y} = {point, 10, 20}
p37
    字符存成ASCII
    f() 释放所有绑定
p43
    erl5.4.12/.erlang 中添加
    io:format("consulting .erlang in ~p~n"), [element(2, file:get_cwd())].
    c:cd("c:/work").
    ......
p49
    Even = fun(X) -> (X rem 2) =:= 0 end.

    返回fun 的fun
    Fruit = [apple, pear, orange]
    MakeTest = fun(L) -> (fun(X) -> lists:member(X,L) end) end.
    IsFruit = MakeTest(Fruit).
    using: 
    IsFruit(pear).     ==> true

    lists:map(fun, L)             ----- 对列表L每个元素实施fun方法，结果形成列表返回
          filter(fun, L)          ----- 对列表L每个元素实施fun方法，将返回true的元素形成列表返回
          member(X, L)            ----- 检验X是否在数组L中
          sum(L)                  ----- 对列表L求和
    lib_misc:for(1,10,fun(I) -> I*I end).
p54
    列表解析
    L = [1,2,3,4]
    [2*X || X < L] ==> [2,4,6,8]
p70
    catch 原语 捕捉erlang:error(a) 会有详细的信息
    包装math:sqrt(-1) 的错误消息
p71 通用风格
    f(X) 返回 {ok, Val}, {error, Why}
    1)
    case f(X) of
        {ok, Val} -> 
            do_some_thing_with(Val)
        {error, Why} ->
            %% ...
     2)
     {ok, Val} = f(X),
     do_some_thing_with(Val);  %% 如果返回错误 会因为匹配失败而抛出异常
     3)
     my_func(X) ->
        case ... of
            ... -> throw({thisError, ...})
            ... -> throw({someOtherError, ...})
     
     try my_func(X)
     catch
        throw:{thisError, X} -> ...
        throw:{someOtherError, X} -> ...
     end
     4) 捕获所有
     try Expr
     catch
        _:_ -> ... handle all exceptions
     end
     5) 忽略异常标签并按下面的方式写，，将不能捕获所有错误
     try Expr
     catch
        _ -> ... handle all 
     end
     6) 通常风格*****
     try foo(...) of
        Val -> ...
     catch
        exit: why -> ...
     end
p74
    tuple_to_list({1, 2, 3}).     == > [1,2,3]
    time().                       == > {20,0,3}
p75
    list_to_binary([Bin1, 1, [2,3,Bin2], 4|Bin3]).
    @spec split_binary(Bin, Pos)   -> {Bin1, Bin2}
    @spec term_to_binary(Term)  -> Bin      % 任意数据转换成二进制
    @spec binary_to_term(Bin)   -> Term     % 二进制数据还原
    @spec size(Bin) -> Int                  % 二进制数据长度
p93
    c(ml, {d, debug}).
    func([{tag, {one, A} = Z1, B} = Z2]) ->
        ...using Z1 Z2 call other fun
p95 进程字典
    @spec put(Key, Value) -> OldValue.
    @spec get(Key) -> Value.
    
p100 停止
    erlang:halt().
    q().
    code:get_path().  %% 获得系统默认加载路径
    @spec code:add_patha(Dir) => true | {error, bad_directory}  %% add to head
    @spec code:add_pathz(Dir) => true | {error, bad_directory}  %% add to tail
    @spec code:all_load() => [] %% all module loaded
    code:clash() %% check crash reason
    ~/.erlang
    home path: init:get_argument(home).
p102 run hello.erl
    1)  c(hello).
        hello:start().
    2)  erlc hello.erl
        erl -noshell -s hello start -s init stop  %%　必须编译过, hello.beam
    3)  erl -eval 'io:forate("Memory: ~p~n", [erlang:memory(total)]).' -noshell -s init stop
    4) hello.sh
    #!/bin/sh
    erl -noshell -pa /home/yu -s hello start -s init stop
    5) hello
    #!/usr/bin/env escript
    main(_) -> io:format("Hello world\n").
    
    -compile(export_all).   %%到处所有
P105 命令行参数的脚本 或使用escript
p107 makefile
p111 ctrl + G -> h%% stop a job in shell
p112 调试环境
    help().
    b() --display all var
    e(N)--repeat <N> expression
    f() -- forget all var
    f(X)-- forget sp. var
    h() -- history
    崩溃转储  webtool:start()  %% 监控工具
p117 并发
    Pid = spawn(Fun)
    Pid ! Message
    receive ... end.
p124
    erl +P 500000
    erlang:system_info(process_limit)  %% 获得系统允许的最大进程数
    receive
        Pattern1 [when Guard1] ->
            Expression1;
        Pattern2 [when Guard2] ->
            Expression2;
     after Time ->
        Expressions
     end
p127(112)
    register(AnAtom, Pid)
    unregister(AnAtom)
    whereis(AnAtom)
    registered() ->[AnAtom::atom()]
p131(115)
    spawn(Mod, FuncName, Args)
p133 (117) on_exit()
    process_flag(trap_exit, true)
p141 (125)
    @spec spawn_link(Fun) -> Pid
    @spec process_flag(trap_exit, true)
    @spec link(Pid) ->true
    @spec unlink(Pid) ->true
    @spec exit(Why) ->none()
    @spec exit(Pid, Why) ->true
    @spec erlang:monitor(process, Item) -> MonitorRef
p147 (131)
p179 (163)接口技术